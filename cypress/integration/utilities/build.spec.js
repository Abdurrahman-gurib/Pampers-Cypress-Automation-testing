/// <reference types="Cypress" />

// build file for main folder
// minify and add checking for --env market + else condition
const appProps = globalThis.params.appProperties;
let baseFile = null;

describe(`BUILD SCRIPT`, () => {
    for (const tempData of appProps.build.data) {
        it(`build generic spec - ${tempData.fileName}`, () => {
            if (appProps.main[Cypress.env(`market`)][tempData.specName]) {
                cy.task(`systemLog`, `---------- START ----------`);
                cy.task(`systemLog`, `build script for ${JSON.stringify(tempData)}`);
                const genericFilePath = `./cypress/integration${tempData.path}.spec.js`;
                cy.readFile(genericFilePath, `utf8`).then((genericFile) => {
                    baseFile = genericFile;
                    if (!tempData.specName.includes(`-legacyScript`)) {
                        // remove comment and replace generic part
                        baseFile = ((baseFile.replace(`%buildSpecName%`, tempData.specName))
                            .replace(tempData.envMarketToUpdate, `[Cypress.env("market")]`));
                        // on one line if true
                        // can not run on windows idk why... -_-
                        if (appProps.build.minify) {
                            (baseFile.replace(/\/\*[\s\S]*?\*\/|\/\/.*/g,'')).replaceAll(`\n`, ``);
                        }
                    }
                    // add ISOtime
                    baseFile = `/** Generated by T.A Squad - ${new Date().toISOString()} */${baseFile}`;
                    const buildNewPath = `cypress/integration/main/${tempData.fileName}_${Cypress.env("market")}.spec.js`;
                    cy.task(`systemLog`, buildNewPath);
                    cy.task(`systemLog`, `${baseFile.slice(0,500)}........`);
                    cy.writeFile(buildNewPath, baseFile);
                });
                cy.task(`systemLog`, `---------- END ----------`);
            } else { cy.task(`systemLog`, `scenario is not applicable for this market`); }
        });
    }
});